Purpose: To use approximate bayesian computation and a good rejection algorithm to create parameters that give summary statistics similar to the data found in Hufford et. al. 2012.

Dependencies/Assumptions:
To run this full pipeline you need the following:
-The Sun Grid Engine
-Working executables of: sfs_code, convertSFS_CODE, msstats, ABCreg, R, Python

If those executables are not already in your path, you must add them:
1) create a file called ".bash_profile" in your home directory (if it doesn't exist)
2) add this, substituting the paths to your exectuable:
PATH=$PATH:/home/user/sfs_code/bin/:/home/user/msstats-0.3.1/bin/
export PATH

Directions to run:
1) qsub maize_bs.sh
2) source cleanup.sh
3) Statistics are in order in final_stats.txt. Paramters are in order in parameters.txt.

*Change parameters in generate_params.r
*You can test out those parameters with 'Rscript generate_params.r 1 2 3'. The output will be on the terminal with parameters saved as 'paramsFile.1.2.3'

Approximate Bayesian Computation
1) Set up prior and data files.
2) ../ABCreg/reg  -T -P 1 -S 2 -p prior_file.txt -d data_file.txt -b bneck -t 0.01
3) Graph bneck.0.post in R

====
Tricks for analysis

- data file contains summary stats from observed data. It should only be 1 line. (no headers):
.0054 -0.434
(the stats above are Pi and TajD)

-prior file contains parameters and summary stats from the simulations. Each line should have the parameter value and the summary stats associated with it (no headers):
0.835507987765595       65.7986 0.241462
0.550444400170818       29.6863 -0.276919
0.212850250769407       42.6132 0.212022
0.781859162030742       106.241 -0.0995736
(the stats above are theta, Pi and TajD)

- make sure you're using the right data. If you're simulating with "--annotate N" then use stats from noncoding windows.
- make sure your stats are actually comparable: msstats gives theta pi per locus. Your data might have theta pi per base pair. 
- if your graph is crappy, try reducing the number of values in your posterior. 
- use cut -f [column #] to get a column of a file.